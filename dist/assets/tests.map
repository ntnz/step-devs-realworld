{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ember-realworld/tests/acceptance/article-test.js","ember-realworld/tests/acceptance/editor/article-test.js","ember-realworld/tests/acceptance/editor/new-test.js","ember-realworld/tests/acceptance/error-test.js","ember-realworld/tests/acceptance/index-test.js","ember-realworld/tests/acceptance/login-test.js","ember-realworld/tests/acceptance/profile-test.js","ember-realworld/tests/acceptance/register-test.js","ember-realworld/tests/acceptance/settings-test.js","ember-realworld/tests/helpers/user.js","ember-realworld/tests/integration/helpers/format-date-test.js","ember-realworld/tests/test-helper.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"ember-realworld/tests/acceptance/article-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-realworld/tests/helpers/user\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _user) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | article', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _user.setupLoggedInUser)(hooks);\n    let user;\n    hooks.beforeEach(function () {\n      user = this.server.create('user', {\n        email: 'bob@example.com',\n        password: 'password123'\n      });\n      this.server.get('/user', schema => {\n        return schema.users.first();\n      });\n    });\n    (0, _qunit.test)('visiting /articles/:slug', async function (assert) {\n      const profile = await this.server.create('profile');\n      const article = await this.server.create('article', {\n        author: profile\n      });\n      await (0, _testHelpers.visit)(`/articles/${article.slug}`);\n      assert.equal((0, _testHelpers.currentURL)(), `/articles/${article.slug}`);\n    });\n    (0, _qunit.test)('favorite article', async function (assert) {\n      const profile = await this.server.create('profile');\n      const article = await this.server.create('article', {\n        author: profile,\n        favorited: false\n      });\n      await (0, _testHelpers.visit)(`/articles/${article.slug}`);\n      await (0, _testHelpers.click)('[data-test-favorite-article-button]'); // eslint-disable-next-line ember/no-settled-after-test-helper\n\n      await (0, _testHelpers.settled)();\n      assert.ok(article.favorited, 'Expected article to be favorited');\n      await (0, _testHelpers.click)('[data-test-favorite-article-button]');\n      assert.notOk(article.favorited, 'Expected article to be unfavorited');\n    });\n    (0, _qunit.test)('follow author', async function (assert) {\n      const profile = await this.server.create('profile', {\n        following: false\n      });\n      const article = await this.server.create('article', {\n        author: profile,\n        favorited: false\n      });\n      await (0, _testHelpers.visit)(`/articles/${article.slug}`);\n      await (0, _testHelpers.click)('[data-test-follow-author-button]'); // eslint-disable-next-line ember/no-settled-after-test-helper\n\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-follow-author-button]').hasTextContaining('Unfollow');\n      await (0, _testHelpers.click)('[data-test-follow-author-button]'); // eslint-disable-next-line ember/no-settled-after-test-helper\n\n      await (0, _testHelpers.settled)();\n      assert.dom('[data-test-follow-author-button]').hasTextContaining('Follow');\n    });\n    (0, _qunit.test)('edit article', async function (assert) {\n      const userProfile = await this.server.schema.profiles.findBy({\n        username: user.username\n      });\n      const article = await this.server.create('article', {\n        author: userProfile\n      });\n      await (0, _testHelpers.visit)(`/articles/${article.slug}`);\n      await (0, _testHelpers.click)('[data-test-edit-article-button]');\n      assert.equal((0, _testHelpers.currentRouteName)(), 'editor.edit', 'Expect to transition to `editor.article` page to edit the article');\n      assert.dom('[data-test-article-form-input-title]').hasValue(article.title);\n    });\n    (0, _qunit.test)('delete article', async function (assert) {\n      assert.expect(1);\n      const userProfile = await this.server.schema.profiles.findBy({\n        username: user.username\n      });\n      const article = await this.server.create('article', {\n        author: userProfile\n      });\n      await (0, _testHelpers.visit)(`/articles/${article.slug}`);\n      await (0, _testHelpers.click)('[data-test-delete-article-button]');\n      assert.equal((0, _testHelpers.currentRouteName)(), 'index', 'Expected to transition to index when article is deleted');\n    });\n    (0, _qunit.test)('post comment', async function (assert) {\n      assert.expect(3);\n      const profile = await this.server.create('profile');\n      const article = await this.server.create('article', {\n        author: profile\n      });\n      const message = 'foo!';\n      await (0, _testHelpers.visit)(`/articles/${article.slug}`);\n      assert.dom('[data-test-article-comment]').doesNotExist();\n      await (0, _testHelpers.fillIn)('[data-test-article-comment-textarea]', message);\n      await (0, _testHelpers.click)('[data-test-article-comment-button]');\n      assert.dom('[data-test-article-comment]').exists({\n        count: 1\n      });\n      assert.dom('[data-test-article-comment-body]').hasText('foo!');\n    });\n    (0, _qunit.test)('delete comment', async function (assert) {\n      assert.expect(2);\n      const profile = await this.server.create('profile');\n      const userProfile = await this.server.schema.profiles.findBy({\n        username: user.username\n      });\n      const article = await this.server.create('article', {\n        author: profile\n      });\n      await this.server.createList('comment', 1, {\n        article,\n        author: userProfile\n      });\n      await (0, _testHelpers.visit)(`/articles/${article.slug}`);\n      assert.dom('[data-test-article-comment]').exists({\n        count: 1\n      });\n      await (0, _testHelpers.click)('[data-test-article-comment-delete-button]');\n      assert.dom('[data-test-article-comment]').doesNotExist();\n    });\n  });\n});","define(\"ember-realworld/tests/acceptance/editor/article-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-realworld/tests/helpers/user\", \"sinon\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _user, _sinon) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | editor/edit', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    hooks.before(function () {\n      _sinon.default.stub(window, 'confirm');\n    });\n    hooks.after(function () {\n      _sinon.default.restore();\n    });\n    (0, _qunit.module)('anonymous user', function (hooks) {\n      (0, _user.setupLoggedOutUser)(hooks);\n      (0, _qunit.test)('is transitioned to login', async function (assert) {\n        await (0, _testHelpers.visit)('/editor/foo');\n        assert.equal((0, _testHelpers.currentURL)(), '/login');\n      });\n    });\n    (0, _qunit.module)('logged-in user', function (hooks) {\n      (0, _user.setupLoggedInUser)(hooks);\n      let user;\n      let userProfile;\n      let article;\n      hooks.beforeEach(function () {\n        user = this.server.create('user');\n        userProfile = this.server.schema.profiles.findBy({\n          username: user.username\n        });\n        article = this.server.create('article', {\n          author: userProfile\n        });\n      });\n      (0, _qunit.test)('can edit their own article', async function (assert) {\n        await (0, _testHelpers.visit)(`/editor/${article.slug}`);\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-title]', 'Test Title');\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-description]', 'Test Description');\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-body]', 'Test Body');\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-tags]', 'test-tag');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-article-form-input-tags]', 'keydown', 'Enter');\n        await (0, _testHelpers.click)('[data-test-article-form-submit-button]');\n        assert.equal((0, _testHelpers.currentRouteName)(), 'articles.article');\n        assert.dom('[data-test-article-title]').hasText('Test Title');\n        assert.dom('[data-test-article-body]').hasText('Test Body');\n      });\n      (0, _qunit.test)('shows article errors from server', async function (assert) {\n        await (0, _testHelpers.visit)(`/editor/${article.slug}`);\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-title]', 'Test Title');\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-description]', 'Test Description');\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-body]', '');\n        await (0, _testHelpers.click)('[data-test-article-form-submit-button]');\n        assert.dom('[data-test-article-form-error-item]').exists({\n          count: 1\n        }, 'A single error exists');\n        assert.dom('[data-test-article-form-error-item]').hasText(\"body can't be blank\");\n        assert.equal((0, _testHelpers.currentRouteName)(), 'editor.edit', 'Should not navigate away from the page when there are errors');\n      });\n    });\n  });\n});","define(\"ember-realworld/tests/acceptance/editor/new-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-realworld/tests/helpers/user\", \"sinon\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _user, _sinon) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | editor', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    hooks.before(function () {\n      _sinon.default.stub(window, 'confirm');\n    });\n    hooks.after(function () {\n      _sinon.default.restore();\n    });\n    (0, _qunit.module)('anonymous user', function (hooks) {\n      (0, _user.setupLoggedOutUser)(hooks);\n      (0, _qunit.test)('is transitioned to login', async function (assert) {\n        await (0, _testHelpers.visit)('/editor');\n        assert.equal((0, _testHelpers.currentURL)(), '/login');\n      });\n    });\n    (0, _qunit.module)('logged-in user', function (hooks) {\n      (0, _user.setupLoggedInUser)(hooks);\n      hooks.beforeEach(function () {\n        this.server.create('user', {\n          email: 'bob@example.com',\n          password: 'password123'\n        });\n      });\n      (0, _qunit.test)('can create an article', async function (assert) {\n        await (0, _testHelpers.visit)('/editor');\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-title]', 'Test Title');\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-description]', 'Test Description');\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-body]', 'Test Body');\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-tags]', 'test-tag');\n        await (0, _testHelpers.triggerKeyEvent)('[data-test-article-form-input-tags]', 'keydown', 'Enter');\n        await (0, _testHelpers.click)('[data-test-article-form-submit-button]');\n        assert.equal((0, _testHelpers.currentRouteName)(), 'articles.article');\n        assert.dom('[data-test-article-title]').hasText('Test Title');\n        assert.dom('[data-test-article-body]').hasText('Test Body');\n      });\n      (0, _qunit.test)('shows article errors from server', async function (assert) {\n        await (0, _testHelpers.visit)('/editor');\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-title]', 'Test Title');\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-description]', 'Test Description');\n        await (0, _testHelpers.fillIn)('[data-test-article-form-input-body]', '');\n        await (0, _testHelpers.click)('[data-test-article-form-submit-button]');\n        assert.dom('[data-test-article-form-error-item]').exists({\n          count: 1\n        }, 'A single error exists');\n        assert.dom('[data-test-article-form-error-item]').hasText(\"body can't be blank\");\n        assert.equal((0, _testHelpers.currentRouteName)(), 'editor.index', 'Should not navigate away from the page when there are errors');\n      });\n    });\n  });\n});","define(\"ember-realworld/tests/acceptance/error-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-realworld/tests/helpers/user\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _user) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | Error', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _user.setupLoggedOutUser)(hooks);\n    (0, _qunit.test)('visiting /error', async function (assert) {\n      await (0, _testHelpers.visit)('/some-BODY-once-told-me');\n      assert.dom('[data-test-error-page]').exists('displays error page content for invalid URLs');\n    });\n  });\n});","define(\"ember-realworld/tests/acceptance/index-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-realworld/tests/helpers/user\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _user) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | index', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _user.setupLoggedOutUser)(hooks);\n    (0, _qunit.test)('visiting /', async function (assert) {\n      this.server.createList('article', 20);\n      await (0, _testHelpers.visit)('/');\n      assert.equal((0, _testHelpers.currentURL)(), '/', 'The home URL is correct');\n      assert.dom('[data-test-article-preview]').exists({\n        count: 10\n      }, 'The correct number of articles appear in the list');\n      assert.dom('[data-test-tag]').exists({\n        count: 7\n      }, 'The correct number of tags appear in the sidebar');\n      assert.dom('[data-test-page-item]').exists({\n        count: 2\n      }, 'The correct number of pages appear in the pagination list');\n      assert.dom('[data-test-tab]').exists({\n        count: 1\n      }, 'The correct number of feed tabs appear');\n      assert.dom('[data-test-feed=\"your\"]').doesNotExist('Your feed is not shown when logged out');\n      assert.dom('[data-test-tab=\"global\"]').hasClass('active', 'The global tag is active');\n      assert.dom('[data-test-page-item=\"1\"]').hasClass('active', 'The active page is correct in the pagination list');\n    });\n    (0, _qunit.test)('clicking a page', async function (assert) {\n      await this.server.createList('article', 20);\n      await (0, _testHelpers.visit)('/');\n      assert.dom('[data-test-article-preview]').exists({\n        count: 10\n      }, 'The correct number of articles appear in the list');\n      await (0, _testHelpers.click)('[data-test-page-item-link=\"2\"]');\n      assert.dom('[data-test-article-preview]').exists({\n        count: 10\n      }, 'After changing page the correct number of articles appear in the list');\n      assert.equal((0, _testHelpers.currentURL)(), '/?page=2');\n      assert.dom('[data-test-page-item=\"2\"]').hasClass('active', 'The active page is correct in the pagination list');\n    });\n    (0, _qunit.test)('clicking a tag', async function (assert) {\n      await this.server.createList('article', 20);\n      await (0, _testHelpers.visit)('/');\n      assert.dom('[data-test-article-preview]').exists({\n        count: 10\n      }, 'The correct number of articles appear in the list');\n      await (0, _testHelpers.click)('[data-test-tag=\"emberjs\"]');\n      assert.dom('[data-test-article-preview]').exists({\n        count: 10\n      }, 'After changing page the correct number of articles appear in the list');\n      assert.equal((0, _testHelpers.currentURL)(), '/?tag=emberjs', 'The URL has the correct tag as a query param');\n      assert.dom('.feed-toggle a.nav-link').exists({\n        count: 2\n      }, 'The correct number of feed tabs appear');\n      assert.dom('[data-test-tab=\"tag\"]').hasClass('active', 'The tag feed toggle is active');\n      assert.dom('[data-test-tab=\"tag\"]').hasText('#emberjs', 'The active feed toggle has the correct tag name');\n    });\n    (0, _qunit.test)('resetting to the main list', async function (assert) {\n      await this.server.createList('article', 20);\n      await (0, _testHelpers.visit)('/?page=2&tag=emberjs');\n      assert.dom('[data-test-article-preview]').exists({\n        count: 10\n      }, 'The correct number of articles appear in the list');\n      await (0, _testHelpers.click)('[data-test-tab=\"global\"]');\n      assert.equal((0, _testHelpers.currentURL)(), '/');\n      assert.dom('[data-test-article-preview]').exists({\n        count: 10\n      }, 'After changing page the correct number of articles appear in the list');\n      assert.dom('[data-test-tab=\"global\"]').hasClass('active', 'The global tag is active');\n      assert.dom('[data-test-page-item=\"1\"]').hasClass('active', 'The first page is active');\n    });\n    (0, _qunit.module)('logged in user', function (hooks) {\n      (0, _user.setupLoggedInUser)(hooks);\n      hooks.beforeEach(function () {\n        this.server.create('user', {\n          email: 'bob@example.com',\n          password: 'password123'\n        });\n        this.server.get('/user', schema => {\n          return schema.users.first();\n        });\n      });\n      (0, _qunit.test)('Your feed', async function (assert) {\n        await this.server.createList('article', 20);\n        this.server.get('/articles/feed', schema => {\n          return {\n            articles: [schema.articles.first()],\n            articlesCount: 1\n          };\n        });\n        await (0, _testHelpers.visit)('/');\n        assert.equal((0, _testHelpers.currentURL)(), '/', 'Lands on the home page');\n        assert.dom('[data-test-tab=\"global\"]').hasClass('active', 'Global feed is selected by default');\n        assert.dom('[data-test-article-preview]').exists({\n          count: 10\n        }, 'The correct articles are shown in the list');\n        await (0, _testHelpers.click)('[data-test-tab=\"your\"]'); // eslint-disable-next-line ember/no-settled-after-test-helper\n\n        await (0, _testHelpers.settled)();\n        assert.equal((0, _testHelpers.currentURL)(), '/?feed=your', 'Lands on the \"Your feed\" page');\n        assert.dom('[data-test-article-preview]').exists({\n          count: 1\n        }, 'One article is loaded on \"Your feed\"');\n        assert.dom('[data-test-tab=\"your\"]').hasClass('active', 'Your feed is selected');\n      });\n    });\n  });\n});","define(\"ember-realworld/tests/acceptance/login-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-realworld/tests/helpers/user\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _user) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | login', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _user.setupLoggedOutUser)(hooks);\n    (0, _qunit.test)('visiting /login', async function (assert) {\n      const user = this.server.create('user', {\n        email: 'bob@example.com',\n        password: 'password123'\n      });\n      await (0, _testHelpers.visit)('/login');\n      await (0, _testHelpers.fillIn)('[data-test-login-email]', user.email);\n      await (0, _testHelpers.fillIn)('[data-test-login-password]', user.password);\n      await (0, _testHelpers.click)('[data-test-login-button]'); // eslint-disable-next-line ember/no-settled-after-test-helper\n\n      await (0, _testHelpers.settled)();\n      assert.equal((0, _testHelpers.currentURL)(), '/', 'URL after login is Home');\n      assert.dom('[data-test-nav-username]').hasText(user.username, 'Logged in username is shown');\n      assert.dom('[data-test-nav-new-post]').exists('Logged in nav is shown');\n      assert.dom('[data-test-nav-sign-up]').doesNotExist('Logged out nav is not shown');\n    });\n    (0, _qunit.test)('visiting /login has link to /register', async function (assert) {\n      await (0, _testHelpers.visit)('/login');\n      await (0, _testHelpers.click)('[data-test-register-link]');\n      assert.equal((0, _testHelpers.currentURL)(), '/register', 'URL after click is Register');\n    });\n  });\n});","define(\"ember-realworld/tests/acceptance/profile-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-realworld/tests/helpers/user\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _user) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | profile', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.module)('logged out user', function (hooks) {\n      (0, _user.setupLoggedOutUser)(hooks);\n      (0, _qunit.test)('visiting /profile/username', async function (assert) {\n        const profileOwner = this.server.create('profile');\n        await (0, _testHelpers.visit)(`/profile/${profileOwner.username}`);\n        assert.dom('[data-test-edit-profile-button]').doesNotExist('A logged-out user does not show the edit profile button');\n      });\n      (0, _qunit.test)('visiting any user profile will see a link to follow the profile owner but links to login', async function (assert) {\n        const profileOwner = this.server.create('profile');\n        await (0, _testHelpers.visit)(`/profile/${profileOwner.username}`);\n        await (0, _testHelpers.click)('[data-test-follow-author-button]');\n        assert.equal((0, _testHelpers.currentURL)(), '/login');\n      });\n      (0, _qunit.test)('sees a tab navigation to articles written by and favorited by the profile owner', async function (assert) {\n        const profileOwner = this.server.create('profile');\n        const otherUser = this.server.create('profile');\n        /**\n         * Articles written by profile owner.\n         */\n\n        this.server.createList('article', 2, {\n          author: profileOwner,\n          favorited: false\n        });\n        /**\n         * Articles favorited by profile owner, not written by profile owner.\n         */\n\n        this.server.createList('article', 3, {\n          author: otherUser,\n          favorited: true\n        });\n        await (0, _testHelpers.visit)(`/profile/${profileOwner.username}`);\n        await (0, _testHelpers.click)('[data-test-profile-tab=\"favorite-articles\"]');\n        assert.equal((0, _testHelpers.currentURL)(), `/profile/${profileOwner.username}/favorites`);\n        assert.dom('[data-test-article-title]').exists({\n          count: 3\n        }, 'Expected a list of 3 articles favorited by profile owner');\n        await (0, _testHelpers.click)('[data-test-profile-tab=\"my-articles\"]');\n        assert.dom('[data-test-article-title]').exists({\n          count: 2\n        }, 'Expected a list of 2 articles created by profile owner');\n        assert.equal((0, _testHelpers.currentURL)(), `/profile/${profileOwner.username}`);\n      });\n      (0, _qunit.test)(\"clicking on an article's favorite button redirects user to login page\", async function (assert) {\n        const profileOwner = this.server.create('profile');\n        /**\n         * Articles written by profile owner.\n         */\n\n        this.server.create('article', 1, {\n          author: profileOwner,\n          favorited: false\n        });\n        await (0, _testHelpers.visit)(`/profile/${profileOwner.username}`);\n        await (0, _testHelpers.click)('[data-test-favorite-article-button]');\n        assert.equal((0, _testHelpers.currentURL)(), '/login');\n      });\n    });\n    (0, _qunit.module)('logged in user', function (hooks) {\n      (0, _user.setupLoggedInUser)(hooks, 'token');\n      let user;\n      hooks.beforeEach(function () {\n        user = this.server.create('user', {\n          email: 'bob@example.com',\n          password: 'password123'\n        });\n        this.server.get('/user', schema => {\n          return schema.users.first();\n        });\n      });\n      (0, _qunit.test)('visiting their own profile sees a link to edit profile', async function (assert) {\n        assert.expect(1);\n        await (0, _testHelpers.visit)(`/profile/${user.username}`);\n        await (0, _testHelpers.click)('[data-test-edit-profile-button]');\n        assert.equal((0, _testHelpers.currentURL)(), `/settings`);\n      });\n      (0, _qunit.test)('visiting another user profile sees a link to follow the profile owner', async function (assert) {\n        const otherUser = this.server.create('profile', {\n          following: false\n        });\n        await (0, _testHelpers.visit)(`/profile/${otherUser.username}`);\n        assert.dom('[data-test-follow-author-button]').includesText(`Follow ${otherUser.username}`, 'The profile is initially unfollowed');\n        await (0, _testHelpers.click)('[data-test-follow-author-button]'); // eslint-disable-next-line ember/no-settled-after-test-helper\n\n        await (0, _testHelpers.settled)();\n        assert.dom('[data-test-follow-author-button]').includesText(`Unfollow ${otherUser.username}`, 'The profile is followed');\n        await (0, _testHelpers.click)('[data-test-follow-author-button]'); // eslint-disable-next-line ember/no-settled-after-test-helper\n\n        await (0, _testHelpers.settled)();\n        assert.dom('[data-test-follow-author-button]').includesText(`Follow ${otherUser.username}`, 'The profile is unfollowed');\n      });\n      (0, _qunit.test)('favorite an article by the user', async function (assert) {\n        const profileOwner = this.server.create('profile');\n        this.server.create('article', 1, {\n          author: profileOwner,\n          favorited: false\n        });\n        await (0, _testHelpers.visit)(`/profile/${profileOwner.username}`);\n        await (0, _testHelpers.click)('[data-test-favorite-article-button]'); // eslint-disable-next-line ember/no-settled-after-test-helper\n\n        await (0, _testHelpers.settled)();\n        assert.dom('[data-test-favorite-article-button=\"favorited\"]').exists('Article should be favorited');\n      });\n    });\n  });\n});","define(\"ember-realworld/tests/acceptance/register-test\", [\"qunit\", \"faker\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-realworld/tests/helpers/user\"], function (_qunit, _faker, _testHelpers, _emberQunit, _setupMirage, _user) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | register', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _user.setupLoggedOutUser)(hooks);\n    (0, _qunit.test)('successful registration', async function (assert) {\n      const user = this.server.create('user', {\n        name: 'Test User',\n        username: 'test_user',\n        email: _faker.default.internet.email(),\n        password: 'password123'\n      });\n      await (0, _testHelpers.visit)('/register');\n      await (0, _testHelpers.fillIn)('[data-test-register-username]', user.username);\n      await (0, _testHelpers.fillIn)('[data-test-register-email]', user.email);\n      await (0, _testHelpers.fillIn)('[data-test-register-password]', user.password);\n      await (0, _testHelpers.click)('[data-test-register-button]');\n      assert.equal((0, _testHelpers.currentURL)(), '/', 'URL after login is Home');\n      assert.dom('[data-test-nav-username]').hasText(user.username, 'Logged in username is shown');\n      assert.dom('[data-test-nav-new-post]').exists('Logged in nav is shown');\n      assert.dom('[data-test-nav-sign-up]').doesNotExist('Logged out nav is not shown');\n    });\n    (0, _qunit.test)('visiting /register has link to /login', async function (assert) {\n      await (0, _testHelpers.visit)('/register');\n      await (0, _testHelpers.click)('[data-test-login-link]');\n      assert.equal((0, _testHelpers.currentURL)(), '/login', 'URL after click is Login');\n    });\n  });\n});","define(\"ember-realworld/tests/acceptance/settings-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"ember-realworld/tests/helpers/user\"], function (_qunit, _testHelpers, _emberQunit, _setupMirage, _user) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | settings', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.module)('logged-out user', function () {\n      (0, _user.setupLoggedOutUser)(hooks);\n      (0, _qunit.test)('visiting /settings redirects to login', async function (assert) {\n        await (0, _testHelpers.visit)('/settings');\n        assert.equal((0, _testHelpers.currentURL)(), '/login');\n      });\n    });\n    (0, _qunit.module)('logged-in user', function (hooks) {\n      (0, _user.setupLoggedInUser)(hooks, 'token');\n      hooks.beforeEach(function () {\n        this.server.create('user', {\n          email: 'bob@example.com',\n          password: 'password123'\n        });\n        this.server.get('/user', schema => {\n          return schema.users.first();\n        });\n      });\n      (0, _qunit.test)('can edit their settings', async function (assert) {\n        await (0, _testHelpers.visit)('/settings');\n        const newSettings = {\n          image: 'image',\n          bio: 'bio',\n          username: 'username',\n          password: 'password',\n          email: 'email@email.com'\n        };\n        assert.notEqual((0, _testHelpers.find)('[data-test-settings-form-input-image]').value, newSettings.image, 'Settings image input should be different');\n        assert.notEqual((0, _testHelpers.find)('[data-test-settings-form-input-bio]').value, newSettings.bio, 'Settings bio input should be different');\n        assert.notEqual((0, _testHelpers.find)('[data-test-settings-form-input-username]').value, newSettings.username, 'Settings username input should be different');\n        assert.notEqual((0, _testHelpers.find)('[data-test-settings-form-input-password]').value, newSettings.password, 'Settings password input should be different');\n        assert.notEqual((0, _testHelpers.find)('[data-test-settings-form-input-email]').value, newSettings.email, 'Settings email input should be different');\n        const newSettingsEntries = Object.entries(newSettings);\n        await Ember.RSVP.all(newSettingsEntries.map(([key, value]) => {\n          return (0, _testHelpers.fillIn)(`[data-test-settings-form-input-${key}]`, value);\n        }));\n        await (0, _testHelpers.click)('[data-test-settings-form-button]');\n        assert.dom('[data-test-settings-form-input-image]').hasValue(newSettings.image, 'Settings image input should be updated');\n        assert.dom('[data-test-settings-form-input-bio]').hasValue(newSettings.bio, 'Settings bio input should be updated');\n        assert.dom('[data-test-settings-form-input-username]').hasValue(newSettings.username, 'Settings username input should be updated');\n        assert.dom('[data-test-settings-form-input-password]').hasValue(newSettings.password, 'Settings password input should be updated');\n        assert.dom('[data-test-settings-form-input-email]').hasValue(newSettings.email, 'Settings email input should be updated');\n      });\n      (0, _qunit.test)('shows settings errors from server', async function (assert) {\n        await (0, _testHelpers.visit)('/settings');\n        await (0, _testHelpers.fillIn)('[data-test-settings-form-input-username]', Array(22).join('a'));\n        await (0, _testHelpers.fillIn)('[data-test-settings-form-input-email]', '');\n        await (0, _testHelpers.click)('[data-test-settings-form-button]');\n        assert.dom('[data-test-settings-form-error-item]').exists({\n          count: 2\n        }, 'Two errors are visible');\n        assert.dom('[data-test-settings-form-error-item=\"0\"]').hasText('username is too long (maximum is 20 characters)');\n        assert.dom('[data-test-settings-form-error-item=\"1\"]').hasText(\"email can't be blank\");\n        assert.equal((0, _testHelpers.currentRouteName)(), 'settings', 'Should not navigate away from the page when there are errors');\n      });\n    });\n  });\n});","define(\"ember-realworld/tests/helpers/user\", [\"exports\", \"ember-realworld/services/session\"], function (_exports, _session) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.setupLoggedInUser = setupLoggedInUser;\n  _exports.setupLoggedOutUser = setupLoggedOutUser;\n  _exports.TOKEN = void 0;\n  const TOKEN = 'auth-token';\n  _exports.TOKEN = TOKEN;\n\n  function setupLoggedInUser(hooks, token = TOKEN) {\n    const originalToken = localStorage.getItem(_session.default.STORAGE_KEY);\n    hooks.beforeEach(function () {\n      localStorage.setItem(_session.default.STORAGE_KEY, token || '');\n    });\n    hooks.afterEach(function () {\n      localStorage.setItem(_session.default.STORAGE_KEY, originalToken || '');\n    });\n  }\n\n  function setupLoggedOutUser(hooks) {\n    const originalToken = localStorage.getItem(_session.default.STORAGE_KEY);\n    hooks.beforeEach(function () {\n      localStorage.removeItem(_session.default.STORAGE_KEY);\n    });\n    hooks.afterEach(function () {\n      localStorage.setItem(_session.default.STORAGE_KEY, originalToken || '');\n    });\n  }\n});","define(\"ember-realworld/tests/integration/helpers/format-date-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Helper | format-date', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it correctly formats the date', async function (assert) {\n      this.set('inputValue', '2019-03-27T17:41:33.076Z');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{format-date inputValue}}\n      */\n      {\n        \"id\": \"Z7sn+3U5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"inputValue\\\",\\\"format-date\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      assert.dom(this.element).hasText('March 27, 2019');\n    });\n    (0, _qunit.test)('it handles invalid inputs', async function (assert) {\n      this.set('inputValue', null);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{format-date inputValue}}\n      */\n      {\n        \"id\": \"Z7sn+3U5\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[30,[36,1],[[35,0]],null]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"inputValue\\\",\\\"format-date\\\"]}\",\n        \"moduleName\": \"(unknown template module)\"\n      }));\n      assert.dom(this.element).hasText('');\n    });\n  });\n});","define(\"ember-realworld/tests/test-helper\", [\"ember-realworld/app\", \"ember-realworld/config/environment\", \"qunit\", \"@ember/test-helpers\", \"qunit-dom\", \"ember-qunit\"], function (_app, _environment, QUnit, _testHelpers, _qunitDom, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _qunitDom.setup)(QUnit.assert);\n  (0, _emberQunit.start)();\n});","define('ember-realworld/config/environment', [], function() {\n  var prefix = 'ember-realworld';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('ember-realworld/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsrpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}